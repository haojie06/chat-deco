//////////////////////////////////////////////////////////////
// This file is generated from the Minecraft documentation. //
// DO NOT EDIT THIS FILE! YOUR CHANGES WILL BE OVERWRITTEN! //
//////////////////////////////////////////////////////////////

/**
 * (Server-side) Events that can be sent to Minecraft to achieve an effect. 
 */
declare const enum SendToMinecraftServer {
    /**
     * This event is used to send a chat message from the server to the players. The event data is the message being sent as a string. Special formatting is supported the same way it would be if a player was sending the message.
     */
    DisplayChat = "minecraft:display_chat_event",
    /**
     * This event is used to execute a slash command on the server with the World Owner permission level. The event data contains the slash command as a string. The slash command will be processed and will run after the event is sent.
     */
    ExecuteCommand = "minecraft:execute_command",
    /**
     * This event is used to create a particle effect that will follow an entity around. This particle effect is visible to all players. Any effect defined in a JSON file (both in your resource pack and in Minecraft) can be used here. MoLang variables defined in the JSON of the effect can then be used to control that effect by changing them in the entity to which it is attached.
     */
    SpawnParticleAttachedEntity = "minecraft:spawn_particle_attached_entity",
    /**
     * This event is used to create a static particle effect in the world. This particle effect is visible to all players. Any effect defined in a JSON file (both in your resource pack and in Minecraft) can be used here. Once the effect is spawned you won't be able to control it further.
     */
    SpawnParticleInWorld = "minecraft:spawn_particle_in_world"
}

/**
 * (Server-side) Events that can be received from Minecraft
 */
declare const enum ReceiveFromMinecraftServer {
    /**
     * This event is triggered whenever an entity is added to the world.
     */
    EntityCreated = "minecraft:entity_created",
    /**
     * This event is triggered whenever an entity dies. This won't be triggered when an entity is removed (such as when using destroyEntity).
     */
    EntityDeath = "minecraft:entity_death",
    /**
     * This event is triggered whenever an entity becomes a rider on another entity.
     */
    EntityStartRiding = "minecraft:entity_start_riding",
    /**
     * This event is triggered whenever an entity stops riding another entity.
     */
    EntityStopRiding = "minecraft:entity_stop_riding",
    /**
     * This event is triggered whenever an entity is ticked. This event will not fire when a player is ticked.
     */
    EntityTick = "minecraft:entity_tick",
    /**
     * This event is triggered whenever a player attacks an entity.
     */
    PlayerAttackedEntity = "minecraft:player_attacked_entity",
    /**
     * This event is triggered whenever the weather changes. It contains information about the weather it is changing to.
     */
    WeatherChanged = "minecraft:weather_changed"
}

/**
 * This event is triggered whenever an entity is added to the world.
 */
declare interface IEntityCreatedEventData {
    /**
     * The entity that was just created
     */
    entity: IEntity;
}

/**
 * This event is triggered whenever an entity dies. This won't be triggered when an entity is removed (such as when using destroyEntity).
 */
declare interface IEntityDeathEventData {
    /**
     * The entity that died
     */
    entity: IEntity;
}

/**
 * This event is triggered whenever an entity becomes a rider on another entity.
 */
declare interface IEntityStartRidingEventData {
    /**
     * The rider
     */
    entity: IEntity;
    /**
     * The entity being ridden
     */
    ride: IEntity;
}

/**
 * This event is triggered whenever an entity stops riding another entity.
 */
declare interface IEntityStopRidingEventData {
    /**
     * The entity that was riding another entity
     */
    entity: IEntity;
    /**
     * If true, the rider stopped riding because they are now dead
     */
    entity_is_being_destroyed: boolean;
    /**
     * If true, the rider stopped riding by their own decision
     */
    exit_from_rider: boolean;
    /**
     * If true, the rider stopped riding because they are now riding a different entity
     */
    switching_rides: boolean;
}

/**
 * This event is triggered whenever an entity is ticked. This event will not fire when a player is ticked.
 */
declare interface IEntityTickEventData {
    /**
     * The entity that was ticked
     */
    entity: IEntity;
}

/**
 * This event is triggered whenever a player attacks an entity.
 */
declare interface IPlayerAttackedEntityEventData {
    /**
     * The entity that was attacked by the player
     */
    attacked_entity: IEntity;
    /**
     * The player that attacked an entity
     */
    player: IEntity;
}

/**
 * This event is triggered whenever the weather changes. It contains information about the weather it is changing to.
 */
declare interface IWeatherChangedEventData {
    /**
     * The name of the dimension where the weather change happened
     */
    dimension: Dimension;
    /**
     * Tells if the new weather has lightning
     */
    lightning: boolean;
    /**
     * Tells if the new weather has rain
     */
    raining: boolean;
}

/**
 * This event is used to create a particle effect that will follow an entity around. This particle effect is visible to all players. Any effect defined in a JSON file (both in your resource pack and in Minecraft) can be used here. MoLang variables defined in the JSON of the effect can then be used to control that effect by changing them in the entity to which it is attached.
 */
declare interface ISpawnParticleAttachedEntityParameters {
    /**
     * The identifier of the particle effect you want to attach to the entity. This is the same identifier you gave the effect in its JSON file
     */
    effect: ParticleEffect;
    /**
     * The entity object you want to attach the effect to
     */
    entity: IEntity;
    /**
     * The offset from the entity's "center" where you want to spawn the effect
     * @default [0, 0, 0]
     */
    offset: VectorArray;
}

/**
 * This event is used to create a static particle effect in the world. This particle effect is visible to all players. Any effect defined in a JSON file (both in your resource pack and in Minecraft) can be used here. Once the effect is spawned you won't be able to control it further.
 */
declare interface ISpawnParticleInWorldParameters {
    /**
     * The dimension in which you want to spawn the effect. Can be "overworld", "nether", or "the end"
     * @default overworld
     */
    dimension: string;
    /**
     * The identifier of the particle effect you want to attach to spawn. This is the same name you gave the effect in its JSON file
     */
    effect: ParticleEffect;
    /**
     * The position in the world where you want to spawn the effect
     * @default [0, 0, 0]
     */
    position: VectorArray;
}
